# Use `sybil2` as a conda environment.

import torch
from argparse import Namespace
import pickle
import pandas as pd
import json
import math
from tqdm import tqdm
import sys
import numpy as np
from segmentation_evaluator import NoduleSegmentEvaluator
sys.path.append('/data/rbg/users/erubel/sybil/SybilX')
from sybilx.utils.registry import get_object
import os
import nibabel as nib
import multiprocessing as mp

d = {"104363T0": 10158, "118560T2": 2620, "107791T0": 1218, "117627T0": 7864, "118713T2": 2855, "118713T0": 783, "203288T0": 28167, "123247T1": 6049, "123247T0": 101, "112073T0": 261, "118323T1": 2104, "118323T0": 347, "116798T0": 416, "116798T1": 2422, "106364T0": 1466, "102267T1": 121, "102267T0": 0, "133934T0": 2339, "213442T2": 2521, "213442T1": 243, "213442T0": 0, "120410T0": 33664, "216422T2": 24858, "216422T1": 13868, "216422T0": 10397, "210419T2": 2531, "210419T1": 1377, "210419T0": 837, "119474T1": 197, "119597T0": 2357, "211918T0": 4382, "203769T0": 2030, "112041T0": 1611, "127400T0": 22702, "127400T1": 28037, "134503T2": 1483, "134503T1": 521, "134503T0": 237, "113623T0": 566, "207526T1": 2728, "207526T2": 0, "108806T0": 2807, "102676T1": 5756, "102676T2": 12687, "102676T0": 4485, "127992T0": 3267, "209412T0": 19553, "216793T0": 16742, "131542T0": 309, "133201T1": 501, "133201T0": 273, "112893T0": 1239, "122866T1": 901, "122866T0": 0, "104778T0": 4929, "132386T0": 4372, "120573T0": 722, "120573T1": 377, "120573T2": 399, "123891T2": 818, "123891T1": 452, "123891T0": 302, "106498T0": 3331, "120954T0": 1358, "120954T1": 1520, "217780T0": 64795, "106046T0": 238251, "207206T0": 3601, "113103T2": 364, "113103T1": 173, "113103T0": 30, "103665T0": 1130, "122590T2": 8275, "122590T1": 14990, "122590T0": 3323, "209184T0": 1737, "109965T0": 217, "109965T1": 420, "109965T2": 984, "110356T0": 210, "110356T1": 1029, "202165T1": 6358, "130315T0": 2977, "102537T2": 1009, "102537T1": 377, "102537T0": 428, "121181T0": 11622, "109532T0": 10032, "130655T1": 509, "130655T2": 1882, "117502T2": 4038, "110716T0": 63, "110716T1": 103, "110716T2": 172, "203607T2": 2107, "116289T1": 1468, "116289T0": 680, "117601T0": 7417, "104248T0": 204, "104248T1": 1329, "106926T0": 2875, "113814T0": 6254, "131005T0": 467, "207857T1": 4175, "207857T0": 498, "107052T0": 44054, "126244T0": 458, "126244T1": 598, "126244T2": 1157, "210371T0": 1369, "209512T1": 1237, "209512T0": 1306, "107058T0": 251, "107058T1": 0, "204421T0": 4647, "215311T0": 0, "214923T0": 940, "105562T0": 2270, "203861T0": 1140, "201275T0": 633, "201275T1": 4413, "201275T2": 55396, "203536T0": 49, "203536T2": 13364, "203536T1": 1673, "132227T0": 2668, "103879T1": 247, "108061T2": 3591, "108061T1": 3140, "107682T1": 3553, "107682T0": 1754, "131306T0": 1377, "213413T0": 484, "213413T1": 1710, "124998T2": 364, "124998T0": 132, "119924T0": 147, "119924T1": 39, "212419T1": 7090, "212419T0": 2097, "214975T0": 19, "112956T0": 3591, "129155T0": 48, "129155T1": 125, "129155T2": 307, "107434T1": 213, "112851T0": 27534, "212587T1": 1864, "212587T2": 3374, "212587T0": 645, "210839T0": 146, "128880T0": 823, "202648T2": 0, "202648T1": 0, "112235T2": 3395, "112235T1": 127, "216978T0": 169, "216978T1": 297, "216978T2": 1103, "101692T0": 106, "101692T2": 839, "101692T1": 258, "117612T1": 2031, "117612T2": 1553, "117612T0": 2076, "201769T0": 19028, "211494T0": 0, "211494T2": 484, "211494T1": 4, "106753T0": 6759, "210218T2": 1756, "118664T0": 1108, "201528T0": 0, "201528T1": 812, "201528T2": 12753, "104999T2": 447, "132047T2": 27501, "111221T0": 23650, "215816T0": 2046, "110987T1": 452, "110987T0": 131, "121337T0": 10271, "218035T0": 0, "218035T1": 0, "216157T0": 8480, "101397T0": 1885, "127298T0": 9583, "201726T0": 1308, "115524T1": 3881, "121794T0": 3569, "216940T1": 237, "216940T0": 257, "203908T1": 1585, "203908T2": 12334, "217438T0": 3093, "217438T2": 3594, "217438T1": 1494, "105771T2": 6557, "104063T0": 1313, "125378T1": 0, "125378T0": 0, "129553T0": 2855, "129553T1": 4323, "207584T0": 0, "207584T1": 0, "102581T0": 1952, "205714T0": 0, "205714T1": 0, "205714T2": 1634, "100158T1": 21, "100158T2": 1020, "129627T0": 632, "106553T0": 14272, "106553T2": 23966, "106553T1": 17762, "214350T0": 10300, "134371T0": 909, "111355T0": 3562, "127302T0": 47, "127302T1": 1351, "203166T0": 212818, "115520T1": 23333, "115520T0": 0, "214683T0": 10209, "120011T0": 0, "110817T1": 20409, "110817T0": 11774, "121333T0": 7592, "130033T0": 2915, "130033T1": 7919, "108670T0": 15665, "103232T0": 1796, "124978T0": 1690, "112575T0": 1222, "112575T1": 4152, "118658T0": 211, "111454T1": 258, "111454T2": 1384, "111454T0": 140, "127923T0": 6969, "204473T0": 170, "212359T0": 514, "207366T0": 0, "207366T1": 12049, "120849T0": 184, "123072T1": 55, "123072T2": 307, "123072T0": 0, "107561T0": 2648, "114122T0": 11, "107151T1": 2898, "107151T0": 375, "117534T0": 2034, "207954T0": 46097, "100242T0": 841, "105352T0": 1041, "105352T2": 2103, "105352T1": 1054, "109573T1": 933, "109573T0": 744, "104960T1": 746, "104960T2": 1635, "104960T0": 553, "112289T0": 3136, "113502T1": 0, "106194T2": 6682, "106194T1": 5946, "106194T0": 3464, "106000T1": 885, "106000T2": 1329, "106000T0": 556, "130467T0": 1256, "208430T0": 5194, "208430T1": 13112, "123123T0": 8097, "207347T2": 5683, "207347T1": 149, "201641T2": 5828, "201641T1": 208, "202610T0": 13765, "101287T0": 2494, "212202T1": 217, "212202T2": 234, "212202T0": 264, "102608T2": 457, "102608T1": 15, "102608T0": 14, "120981T1": 8617, "115174T0": 3068, "115174T1": 2881, "107328T0": 687, "207431T0": 565, "125353T0": 2307, "206354T0": 1577, "206354T1": 2677, "206687T0": 170, "208792T0": 38223, "121895T0": 389, "214812T0": 1358, "119029T0": 23712, "130975T1": 1631, "200066T1": 0, "200066T2": 344, "200066T0": 0, "213972T0": 0, "213972T2": 3941, "213972T1": 688, "207391T0": 376, "129695T1": 25583, "129695T2": 21752, "120570T2": 496, "130162T0": 64925, "203500T0": 8053, "123521T0": 396, "123521T1": 203, "123521T2": 1357, "215463T0": 0, "126446T0": 1685, "110021T0": 990, "100913T0": 1107, "100913T1": 588, "123066T0": 5194, "202268T1": 69, "202268T2": 406, "105974T1": 1824, "105974T0": 635, "106591T0": 7200, "127619T0": 0, "127619T1": 507, "112258T1": 1578, "112258T0": 1056, "210497T0": 13365, "201674T0": 5874, "209874T0": 1537, "119839T0": 3724, "129035T0": 0, "125663T0": 18516, "202976T2": 4596, "202976T1": 949, "216395T0": 483, "200628T0": 17965, "200628T1": 47, "200628T2": 3823, "109198T0": 340, "109198T1": 1868, "109198T2": 8635, "206359T0": 5653, "206359T1": 7201, "115345T0": 335, "133076T0": 157, "133076T2": 10, "133076T1": 64, "101387T0": 3763, "126823T0": 0, "126823T2": 1146, "126823T1": 212, "215998T0": 34377, "128156T0": 17722, "121469T0": 1127, "134088T0": 2525, "209831T1": 24490, "209831T0": 9324, "200683T0": 0, "106639T0": 2463, "106639T1": 0, "204694T1": 66, "204694T0": 80, "124261T1": 711, "216622T0": 1747, "201519T0": 6680, "117025T1": 2555, "117025T0": 1809, "134493T0": 13891, "218307T0": 66, "218307T2": 1092, "218307T1": 73, "133719T0": 4816, "100280T1": 2491, "100280T0": 936, "129511T1": 1688, "129511T2": 3330, "129511T0": 2067, "122262T0": 3938, "215002T0": 0, "215002T1": 0, "215002T2": 9043, "105142T0": 6934, "211707T2": 601, "109589T0": 109, "214419T0": 1619, "214419T2": 2302, "214419T1": 993, "207830T2": 5728, "207830T1": 2635, "200674T1": 2027, "200674T0": 119, "119818T0": 1285, "205687T0": 493, "205687T1": 597, "119496T0": 14970, "109189T0": 54202, "133321T0": 1068, "200209T1": 177, "214553T0": 32094, "214553T2": 37846, "214553T1": 34236, "134408T2": 3196, "209865T0": 633, "213439T0": 34018, "213439T1": 88214, "213439T2": 225459, "205900T0": 4878, "205900T1": 9283, "102388T0": 2790, "116176T1": 288, "116176T2": 7004, "116176T0": 695, "131611T1": 0, "131611T2": 0, "131611T0": 0, "215825T1": 12768, "215825T0": 0, "210581T0": 345, "210581T1": 309, "210581T2": 827, "210462T0": 4461, "126520T0": 7532, "111487T0": 13783, "212900T0": 23742, "212527T0": 1976, "201979T0": 1251, "201979T1": 4245, "118681T1": 3322, "118681T0": 146, "204197T0": 2548, "101192T0": 1079, "101192T1": 1564, "101192T2": 2741, "120289T0": 11171, "120289T2": 17668, "120289T1": 10988, "119743T0": 2057, "119743T1": 3620, "123825T1": 1555, "123825T2": 2922, "123825T0": 1063, "208801T0": 4626, "208801T1": 4833, "205418T0": 110, "217203T0": 4537, "217203T2": 6909, "217203T1": 3811, "106971T2": 5819, "106971T0": 3569, "213046T0": 4677, "122135T0": 13679, "107521T0": 2191, "213754T0": 2785, "213754T1": 4094, "108611T0": 1902, "211893T0": 6298, "217121T2": 204, "217121T1": 0, "217121T0": 152, "114311T0": 1501, "215151T1": 3568, "215151T0": 1956, "132313T1": 5489, "132313T2": 7331, "132313T0": 5321, "207647T1": 902, "207647T0": 464, "113918T1": 1475, "113918T2": 5475, "113918T0": 378, "215585T0": 0, "215585T2": 26079, "133640T0": 1105, "131174T1": 1184, "131174T0": 858, "104815T0": 6290, "104815T1": 6982, "112901T0": 909, "112901T1": 10005, "204067T0": 396, "131963T1": 1670, "131963T2": 2217, "131963T0": 1154, "105767T0": 372, "204870T0": 342, "204870T1": 433, "214572T0": 697, "101068T1": 484, "101068T0": 97, "209683T0": 11083, "120070T1": 2943, "120070T2": 6977, "120070T0": 1781, "126576T1": 947, "126576T0": 1515, "130942T0": 13079, "107610T0": 9717, "110061T0": 457, "218510T0": 2836, "218510T1": 3946, "218510T2": 5211, "207691T0": 7806, "200931T1": 181, "200931T2": 50008, "113820T1": 324, "113820T2": 617, "113820T0": 147, "106432T0": 203, "212293T0": 2778, "128944T2": 2085, "128944T1": 463, "206870T1": 114, "206870T2": 1559, "206870T0": 57, "200056T1": 1658, "200056T0": 1831, "125450T2": 193, "100954T0": 1669, "100954T1": 3267, "109345T1": 463, "109345T0": 370, "108420T1": 4348, "209029T0": 12650, "209029T1": 13407, "214472T0": 4515, "212819T0": 9031, "101428T2": 405, "117966T1": 412, "117966T0": 87, "214822T0": 3378, "103621T0": 236, "103621T2": 1866, "103621T1": 1245, "117799T0": 1906, "108766T0": 3372, "207869T0": 2964, "118297T2": 1149, "118297T1": 1004, "118297T0": 0, "124190T0": 0, "124190T1": 598, "103619T0": 0, "103619T1": 1245, "209116T0": 0, "209116T1": 8060, "213753T0": 3153, "217482T1": 873, "124864T1": 4350, "124864T0": 1999, "103359T1": 549, "103359T2": 1188, "103359T0": 141, "120701T0": 4189, "121169T1": 0, "121169T0": 0, "104386T0": 2329, "104386T1": 3583, "127399T0": 13674, "110196T0": 4332, "203087T1": 196, "203087T2": 722, "203087T0": 0, "109616T0": 7960, "207782T0": 2791, "207782T1": 8236, "108543T1": 30449, "108814T1": 93, "108814T2": 357, "106286T0": 68912, "210754T2": 3404, "210754T1": 2911, "210754T0": 0, "132036T2": 7973, "104182T0": 1344, "200701T0": 17593, "124486T1": 413, "107030T2": 25951, "107030T0": 2182, "204443T0": 1518, "204443T1": 2058, "215290T0": 4873, "202822T1": 0, "202822T2": 1805, "213544T1": 1636, "213544T0": 1, "114378T1": 331, "126999T0": 6068, "100012T0": 4633, "100012T1": 7598, "104683T0": 132, "104683T1": 334, "102266T0": 16357, "208944T0": 1598, "121099T0": 3441, "218391T0": 12352, "218391T1": 9268, "213630T0": 0, "213630T1": 883, "104564T0": 10006, "103507T1": 2595, "103507T0": 459, "125408T0": 2714, "114746T2": 2015, "114746T1": 1299, "114746T0": 333, "217245T1": 6413, "217245T0": 2472, "122226T0": 2924, "212718T2": 36299, "212718T1": 24175, "212718T0": 13240, "200969T0": 601, "212615T0": 59047, "102658T1": 2592, "102658T0": 862, "208589T1": 580, "208589T0": 1034, "203125T0": 23610, "213860T0": 1103, "103344T1": 60, "103344T2": 1353, "217951T0": 2155, "209095T1": 715, "209095T0": 163, "131156T1": 476, "131156T2": 1580, "131156T0": 204, "103703T0": 27810, "213733T0": 320, "213733T1": 7796, "217501T1": 191, "217501T2": 13325, "102806T0": 199635, "121073T0": 2322, "121004T0": 3453, "110866T0": 10975, "207786T0": 2213, "122364T1": 1956, "122364T0": 88, "110071T0": 1807, "131657T0": 2515, "107133T0": 643, "131979T0": 330, "134009T0": 445, "205781T0": 9437, "119326T1": 53129, "119326T0": 21190, "123993T0": 0, "102746T0": 1644, "109203T0": 0, "200017T0": 976, "105012T0": 10856, "105012T1": 8974, "214640T1": 252, "214640T2": 329, "214640T0": 30, "121893T0": 3908, "109889T0": 9424, "133792T1": 0, "133792T2": 0, "108352T0": 700, "108352T1": 689, "216370T0": 4001, "218368T0": 14205, "203791T1": 2008, "117820T1": 2362, "117820T0": 1298, "112285T0": 535, "123515T1": 1752, "123515T0": 211, "120969T0": 483, "128940T1": 1936, "128940T0": 875, "100147T1": 3470, "100147T0": 534, "208735T0": 117, "208735T1": 786, "214571T0": 1823, "217877T0": 2537, "217877T1": 1950, "204909T0": 31363, "105713T1": 321, "105713T2": 1106, "105713T0": 1359, "133279T0": 140, "133279T2": 518, "133279T1": 204, "127890T0": 0, "216238T0": 1550, "200221T1": 0, "200221T2": 1474, "200221T0": 27, "109852T0": 23055, "128669T2": 939, "218357T2": 47367, "218357T1": 386, "218357T0": 373, "126792T0": 653, "126792T1": 1127, "118672T1": 372, "118672T2": 12, "118672T0": 214, "202128T0": 4922, "131910T2": 39354, "131910T1": 33887, "131910T0": 21395, "101066T0": 626, "120393T0": 0, "120393T1": 744, "111859T0": 20767, "100703T0": 735, "125727T1": 968, "125727T2": 1300, "125727T0": 663, "100697T2": 0, "100697T1": 69, "100697T0": 0, "205591T0": 13429, "207346T2": 368, "211328T0": 21005, "213485T0": 142, "213485T1": 255, "213485T2": 275, "212379T0": 5660, "202611T1": 337, "202611T2": 1290, "126955T0": 1430, "126955T1": 3484, "100570T0": 6987, "115962T0": 95490, "115962T1": 89393, "208446T1": 939, "208446T2": 1006, "208446T0": 623, "104208T1": 431, "104208T0": 232, "123629T0": 1275, "101834T0": 10077, "114182T1": 7276, "114182T0": 804, "121999T1": 1999, "121999T0": 874, "216399T0": 7294, "128651T0": 6722, "103760T0": 4289, "120708T0": 13275, "216730T0": 399, "216730T2": 4954, "216730T1": 856, "126967T1": 291, "126967T2": 1646, "126967T0": 140, "200527T0": 28132, "102736T1": 1984, "113176T0": 4081, "204883T1": 1031, "204883T0": 0, "203759T0": 1065, "203759T1": 2411, "203759T2": 4769, "131423T1": 1258, "131423T0": 169, "105340T1": 576, "105340T0": 297, "215394T2": 4243, "215394T1": 2569, "215394T0": 8795, "129285T0": 31520, "130491T2": 4035, "116137T2": 2115, "116137T1": 66, "205283T0": 0, "100658T1": 47, "100658T2": 985, "133786T1": 3118, "133786T0": 1091, "213734T0": 496, "213734T1": 806, "213734T2": 434, "122025T0": 5202, "216160T1": 577, "216160T0": 159, "203581T0": 198, "203581T2": 2985, "203581T1": 814, "212222T0": 2591, "212222T1": 3657}

def get_annotations_mask(row, annots, shape):
    slice_ids = [p.split('/')[-1].split('.dcm')[0] for p in row['paths']]
    mask = torch.zeros(shape)
    W, H = mask.shape[1:]
    for i, slice in enumerate(slice_ids):
        for bbox in annots.get(slice, []):
            x_left, y_top = bbox["x"] * W, bbox["y"] * H
            x_right, y_bottom = x_left + bbox["width"] * W, y_top + bbox["height"] * H
            x_left, y_top = math.floor(x_left), math.floor(y_top)
            x_right, y_bottom = math.ceil(x_right), math.ceil(y_bottom)
            mask[i,y_top:y_bottom, x_left:x_right] = 1
    return mask


def process_row(row):
    exam = row['exam']

    nodule_row = nodule_dataset[nodule_dataset['PID'] == int(row['pid'])]
    tp = row['screen_timepoint']

    # same subset!
    if f"{row['pid']}T{tp}" not in d:
        return None

    if isinstance(nodule_row[f"Annotated_{tp}"].iloc[0], str): # has annotation
        annotated_sid = [s for s in nodule_row[f"Annotated_{tp}"].iloc[0].split(';') if s == row['series']]

        if len(annotated_sid) == 0:
            return None

        annots = annotations[annotated_sid[0]]

        try:
            if "lung_ct" in mask_dir:
                assert threshold_val is not None
                segmentation = (pickle.load(open(f"{mask_dir}/sample_{exam}.hiddens", "rb"))["hidden"][0] > 0.5).int()
            else:
                assert threshold_val is None
                segmentation = torch.tensor((nib.load(os.path.join(mask_dir, f"nlst_{row['pid']}T{tp}.nii.gz")).get_fdata() > 0).astype(np.uint8))
                # segmentation = torch.tensor((nib.load(os.path.join(mask_dir, f"nlst_{row['pid']}T{tp}.nii.gz")).get_fdata() > threshold_val).astype(np.uint8))
                # segmentation = torch.tensor((nib.load(os.path.join(mask_dir, f"nlst_{row['pid']}T{tp}_output_mask_p_0.5_cleaned.nii.gz")).get_fdata() > threshold_val).astype(np.uint8))

                # segmentation = torch.tensor((nib.load(os.path.join(mask_dir, f"nlst_{row['pid']}T{tp}_output_mask_p_{threshold_val}_cleaned.nii.gz")).get_fdata() > 0).astype(np.uint8))
        except FileNotFoundError:
            return None
        
        if use_lung_vessel_mask:
            try:
                lung_vessel_mask = torch.tensor(nib.load(os.path.join(lung_vessel_mask_dir, f"nlst_{row['pid']}T{tp}.nii.gz")).get_fdata())
            except FileNotFoundError:
                return None

            print("Unique Values", np.unique(lung_vessel_mask.numpy(), return_counts=True))

            assert lung_vessel_mask.shape == segmentation.shape

            segmentation = (~(lung_vessel_mask > 0)).int() * segmentation # only keep things *outside* of the mask
        
        assert torch.all((segmentation == 0) | (segmentation == 1)).item(), "Expected a binary tensor."

        # nodule identification according to export annotation
        mask1 = get_annotations_mask(row, annots, segmentation.shape)

        nodule_hit = ((mask1 * segmentation).sum() > 0).item()
        dice = evaluator.get_scan_wise_dice(mask1[None].numpy(), segmentation[None].numpy()).item()
        summed = (mask1 * segmentation).int().sum().item()
        key_ = f"{row['pid']}T{tp}"

        return nodule_hit, dice, summed, key_


def main():
    with mp.Pool(processes=os.cpu_count()) as pool:
        results = list(tqdm(pool.imap(process_row, dataset.dataset), total=len(dataset.dataset), ncols=100))

    nodule_identification = []
    dices = []
    row_to_id = {}

    for res in results:
        if res is None:
            continue
        nodule_hit, dice, summed, key_ = res
        nodule_identification.append(nodule_hit)
        dices.append(dice)
        row_to_id[key_] = summed

    with open(f"output_no_instance_{os.path.basename(mask_dir)}_{threshold_val}.json", "w") as f:
        json.dump(row_to_id, f)

    print(f"Threshold Value: {threshold_val}")
    print(f"Nodule Recall [N = {len(nodule_identification)}]: {len([val for val in nodule_identification if val]) / len(nodule_identification)}")
    print(f"Mean Dice [N = {len(dices)}]: {np.mean(dices).item()}\nMedian Dice [N = {len(dices)}]: {np.median(dices).item()}\n")


if __name__ == "__main__":
    annotations = json.load(open("/data/rbg/shared/datasets/NLST/NLST/annotations_122020.json", "r"))
    args = Namespace(**pickle.load(open('/data/rbg/users/pgmikhael/current/SybilX/logs/c32cb085afbe045d58a7c83dcb71398c.args', 'rb')))
    nodule_dataset = pd.read_csv('/data/rbg/users/pgmikhael/current/SybilX/notebooks/NoduleGrowth/nlst_cancer_nodules.csv')
    dataset = get_object(args.dataset, 'dataset')(args, "test")

    evaluator = NoduleSegmentEvaluator(min_cluster_size=25)

    # mask_dir = "/data/rbg/scratch/lung_ct/e31840e7efe14a10472d817f8a14b27f" # BMP3D finetuned # 0.7401
    # mask_dir = "/data/rbg/scratch/lung_ct/epoch=7" # BMP2D finetuned # 0.9267
    # mask_dir = "/data/rbg/scratch/lung_ct/0f18c617a2f6b5a768d81c7465e206f2epoch=12" # TSM 1 # 0.5606
    # mask_dir = "/data/rbg/scratch/lung_ct/aeec028d12497e8dcd29cdf025dfb675epoch=0" # TSM 2 # ~0.4369

    # mask_dir = "/data/scratch/erubel/nlst/biomedparse++/p_0.8"
    # mask_dir = "/data/scratch/erubel/nlst/biomedparse++/p_0.8_no_lung_mask"
    # mask_dir = "/data/scratch/erubel/nlst/biomedparse++/p_0.8_with_lung_mask"
    # mask_dir = "/data/scratch/erubel/nlst/biomedparse++/p_0.0_no_lung_mask"

    # mask_dir = "/data/rbg/scratch/nlst_nodules/v2/masks/frozen" # BMP-based (~0.92)
    # mask_dir = "/data/rbg/scratch/nlst_nodules/v2/masks/frozen_nnunet_b3_after_lung_mask" # nnU-Net-based (~0.67)
    
    # mask_dir = "/data/scratch/erubel/nlst/biomedparse++/p_0.0_no_lung_mask_postprocessed_with_lung_range_no_vessel_mask_frozen" # 0.7538

    # mask_dir = "/data/scratch/erubel/nlst/lung_nodules_total_segmentator" # 0.7525

    # lots of values
    # mask_dir = "/data/scratch/erubel/nlst/biomedparse++/p_0.0_no_lung_mask_postprocessed_with_lung_range_no_vessel_mask_frozen3_lots_of_vals"

    # mask_dir = "/data/rbg/scratch/nlst_nodules/v2/masks/frozen4"
    mask_dir = "/data/rbg/scratch/nlst_nodules/v2/masks/frozen5"

    # threshold_val = 0.0
    # threshold_val = 0.1
    # threshold_val = 0.2
    # threshold_val = 0.3
    # threshold_val = 0.4
    # threshold_val = None
    threshold_val = None
    
    use_lung_vessel_mask = False

    # 1 -> vessel; 2 -> trachea?
    # TODO: can potentially look at only 1 if recall suffers
    # lung_vessel_mask_dir = "/data/scratch/erubel/nlst/lung_vessels"
    lung_vessel_mask_dir = None

    main()